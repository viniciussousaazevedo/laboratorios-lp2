package controleAlunos;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * Classe que realiza operações com alunos e grupos de estudo formados por estes.
 * 
 * @author Vinícius Sousa Azevedo
 */
public class ControleAlunos {
	
	/**
	 * Mapa de alunos, que associa sua matrícula (única para cada aluno) com o objeto do tipo Aluno
	 */
	private HashMap<String, Aluno> alunos;
	
	/**
	 * Mapa de objetos, que associa seu nome (único para cada grupo de estudo) com o objeto do tipo GrupoEstudo
	 */
	private HashMap<String, GrupoEstudo> gruposEstudo;

	/**
	 * Mapa que analisa o curso dos alunos, associando o nome do curso com a quantidade de grupos de estudo que tem restrição relacionada a este curso.
	 */
	private HashMap<String, Integer> cursosAlunos;

	/**
	 * Lista dos alunos que respondem ao professor durante a aula.
	 */
	private ArrayList<Aluno> alunosQueRespondem;
	
	/**
	 * Constrói o controle de alunos, inicializando todos os atributos.
	 */
	public ControleAlunos() {
		this.alunos = new HashMap<>();
		this.gruposEstudo = new HashMap<>();
		this.cursosAlunos = new HashMap<>();
		this.alunosQueRespondem = new ArrayList<Aluno>();
	}
	
	/**
	 * checa se o aluno está presente no mapa de alunos.
	 * 
	 * @param matricula corresponde à matricula do aluno, String de identificação única deste.
	 * @return valor booleano, que retorna true se o aluno está presente no mapa, e false se não está.
	 */
	public boolean isAlunoPresente(String matricula) {
		return this.alunos.containsKey(matricula);
	}
	
	/**
	 * checa se o grupo de estudo está presente no mapa de grupos de estudo.
	 * 
	 * @param nome corresponde ao nome do grupo, String de identificação única deste.
	 * @return valor booleano, que retorna true se o grupo de estudo está presente no mapa, e false se não está.
	 */
	public boolean isGrupoPresente(String nome) {
		return this.gruposEstudo.containsKey(nome);
	}
	
	/**
	 * cadastra um aluno com base em sua matrícula, nome e curso. Se o curso do aluno for inédito, é criada mais uma relação no atributo cursoAlunos, envolvendo o curso inédito e o valor zero
	 * 
	 * @param matricula corresponde à matricula do aluno, String de identificação única deste.
	 * @param nome corresponde ao nome do aluno
	 * @param curso corresponde ao curso do aluno
	 * @return valor booleano, que indica true se foi possível realizar o cadastro, e false se não foi.
	 */
	public boolean cadastraAluno(String matricula, String nome, String curso) {
		boolean retorno = false;
		
		if (!this.isAlunoPresente(matricula)) {
			Aluno aluno = new Aluno(matricula, nome, curso);
			this.alunos.put(matricula, aluno);
			
			String cursoMinusculo = curso.toLowerCase();
			if (!this.cursosAlunos.containsKey(cursoMinusculo)) {
				int contador = 0;
				this.cursosAlunos.put(cursoMinusculo, contador);
				for (GrupoEstudo grupo : this.gruposEstudo.values()) {
					if (cursoMinusculo.equals(grupo.getRestricao().toLowerCase())) {
						contador++;
						this.cursosAlunos.put(cursoMinusculo, contador);
					}
				}
			}
			
			retorno = true;
		}
		return retorno;
	}
	
	/**
	 * exibe as informações básicas do aluno com base em sua matrícula.
	 * 
	 * @param matricula corresponde à matricula do aluno, String de identificação única deste.
	 * @return o valor, em String, das informações básicas do aluno. Caso o aluno não seja encontrado, é retornada uma String vazia.
	 */
	public String exibeAluno(String matricula) {
		String retorno = "";
		if (this.isAlunoPresente(matricula)) {
			retorno =  "Aluno: " + this.alunos.get(matricula).toString();
		}
		return retorno;
	}
	
	/**
	 * cadastra um grupo de estudo com base em seu nome e restrição opcional de curso para seus participantes.
	 * 
	 * @param nome corresponde ao nome do grupo, String de identificação única deste.
	 * @param restricao corresponde à restrição opcional do grupo de estudo
	 * @return valor booleano, que indica true se foi possível realizar o cadastro, e false se não foi.
	 */
	public boolean cadastraGrupo(String nome, String restricao) {
		boolean retorno = false;
		
		if (!this.isGrupoPresente(nome)) {
			GrupoEstudo grupo = new GrupoEstudo(nome, restricao);
			this.gruposEstudo.put(nome, grupo);
			
			String restricaoMinuscula = restricao.toLowerCase();
			for (String curso : this.cursosAlunos.keySet()) {
				if (restricaoMinuscula.equals(curso)) {
					this.cursosAlunos.put(curso, this.cursosAlunos.get(curso)+1);
					break;
				}
			}
			
			retorno = true;
		}
		return retorno;
	}
	
	/**
	 * 
	 * 
	 * @param matricula corresponde à matricula do aluno, String de identificação única deste.
	 * @param nomeGrupo corresponde ao nome do grupo, String de identificação única deste.
	 * @return
	 */
	public boolean alocaAlunoGrupo(String matricula, String nomeGrupo) {
		boolean retorno = false;
		Aluno aluno = this.alunos.get(matricula);
		GrupoEstudo grupo = this.gruposEstudo.get(nomeGrupo);
		
		if (
				(this.isAlunoPresente(matricula) && 
				this.isGrupoPresente(nomeGrupo)) && 
				(aluno.getCurso().equals(grupo.getRestricao()) || 
				grupo.getRestricao().trim().equals(""))) {
			
			grupo.adicionaAluno(aluno);
			retorno = true;
		}
		return retorno;
	}
	
	/**
	 * 
	 * 
	 * @param nomeGrupo corresponde ao nome do grupo, String de identificação única deste.
	 * @param matriculaAluno corresponde à matricula do aluno, String de identificação única deste.
	 * @return
	 */
	public boolean pertinenciaGrupo(String nomeGrupo, String matriculaAluno) {
		boolean retorno = false;
		Aluno aluno = this.alunos.get(matriculaAluno);
		GrupoEstudo grupo = this.gruposEstudo.get(nomeGrupo);
		
		if (this.isGrupoPresente(nomeGrupo) && 
				this.isAlunoPresente(matriculaAluno) && 
				grupo.getAlunos().contains(aluno)) {
			retorno = true;
		}
		return retorno;
	}
	
	/**
	 * 
	 * 
	 * @param matricula corresponde à matricula do aluno, String de identificação única deste.
	 * @return
	 */
	public boolean cadastraAlunoQueResponde(String matricula) {
		boolean retorno = false;
		
		if (this.isAlunoPresente(matricula)) {
			this.alunosQueRespondem.add(this.alunos.get(matricula));
			retorno = true;
		}
		return retorno;
	}
	
	/**
	 * 
	 * 
	 * @return
	 */
	public String listaAlunosQueRespondem() {
		String retorno = "\nAlunos:";
		int contador = 1;
		
		for (Aluno aluno : this.alunosQueRespondem) {
			retorno += "\n" + contador + ". " + aluno.toString();
			contador++;
		}
		return retorno;
	}
	
	/**
	 * 
	 * 
	 * @return
	 */
	public String contagemGruposRestricao() {
		String retorno = "";
		for (String curso : this.cursosAlunos.keySet()) {
			String cursoFormatado = curso.substring(0, 1).toUpperCase().concat(curso.substring(1));
			retorno += "\nCurso: " + cursoFormatado 
					+ "\n" + cursoFormatado 
					+ " " + this.cursosAlunos.get(curso) + "\n";
		}
		return retorno;
	}
	
	/**
	 * 
	 * 
	 * @return
	 */
	public HashMap<String, GrupoEstudo> getGruposEstudo() {
		return this.gruposEstudo;
	}
}
